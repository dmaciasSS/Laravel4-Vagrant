<?xml version="1.0" encoding="UTF-8"?>

<!-- 
This sample code is intended to be used as a simple starting point for creating your own custom reply template.
Modifications to the XML structure should not be required and may result in your custom template failing to load properly.
-->
<Module>
<ModulePrefs title="Custom Reply Template Sample"
         author="Cisco Systems, Inc."
         scrolling="true">
<Require feature="dynamic-height"/>
<Require feature="settitle"/>
<Require feature="minimessage"/>
<Require feature="setprefs"/>
</ModulePrefs>
<Content type="html">
<![CDATA[
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="https://172.31.5.56/templates/reply/../../templates/reply/css/themes/jquery.reply.template.custom.css" rel="stylesheet" type="text/css"/>

<style type="text/css">
	body {
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
	color:#000000;
	font-size:12px;
	position:absolute;z-index:0;top:0px;left:0px;
	background-color:transparent; 
	width:100%;
	margin:0;padding:0;border:0;
}
	  
a:link             {color:#333399;text-decoration:underline;} 
a:visited          {color:#993366;text-decoration:underline;} 
br                 {line-height:8px;clear:both;}


th {
background-color:#eef3f8;
border-bottom:1px solid #eef3f8;
border-top:1px solid #eef3f8;
border-left:1px solid #eef3f8;
border-right:1px solid #FFFFFF;
font-weight:normal;
line-height:16px;
padding-left:2px;
padding-right: 2px;
text-align:left;
vertical-align:middle;
}

td {
line-height:16px;
padding: 1px;
vertical-align: top;
}

td input[type="checkbox"] {
	margin-left: 5px;
}

.placeholder
{
  color: #aaa;
}
.transferBox {
	margin-top: 15px;
	width: 480px;
}

.transferBox select {
	height: 200px;
	width: 200px;
}

.transferBox div {
	float: left;
	margin-left: 2px;
	margin-right: 2px;
}

.transferBox .controls {
	width: 40px;
	padding-top: 30px;
}

.transferBox .controls .spacer {
	display: block;
	height: 25px;
}

.transferBox div button {
	width: 100%;
	margin-left: 0 auto ;
	margin-right: 0 auto ;
}

.layer {
	clear: both;
}

.italics {
	font-style: italic;
}


button {
         cursor:pointer;
}

.button-disabled {
      cursor:default;
}

.button-enabled {
      cursor:pointer;
}

legend {
    font-size: 12px;
    font-weight: normal;
	top: -.1em;	
    position:relative;
}

select:disabled{
	background-color:#DCDCDC;
}

div.floatLeft {
	float: left;
	margin: 5px 0 0 10px;
	width: 500px;
}

.toolbar {
	float: right;
	margin-right: 5px;
	margin-bottom: 5px;
}

.toolbar IMG {
	border:0;
	width: 20px;
	height: 20px;
	padding-left: 3px;
	padding-top: 1px;
	cursor: pointer;
}

.toolbarShow {
	border:0;
	float: right;
	margin-right: 20px;
}

.toolbarShow IMG{
	border:0;
	width: 20px;
	height: 20px;
	padding-left: 8px;
	padding-top: 1px;
	cursor: pointer;
}

.hidden {
	display: none;
}

div.floatRight {
	float: right;
	margin: 7px 50px 0 0;
}

span.floatLeft {
	float: left;
	margin: 10px 0 0 10px;
}

span.floatRight {
	float: right;
	margin: 7px 50px 0 0;
}

.title {
	font-weight:normal;
	line-height:16px;
	text-align:left;
	vertical-align:middle;
	width: 100%;
	height: 22px;
	padding-top: 1px;
}
.title-left {
	float:left;
	width:600px;
}
.title-right {
	float:right;
}

.layerHeading {
	font-size:14px;
}

.layerHeadingFloat {
	float: left;
	margin: 0;
	padding: 0 0 5px 0;
}

.info, .success, .warning, .error, .systemError, .systemWarning, .replyTemplateError {
	width: 100%;
    border: 1px solid;
	margin: 5px 0px;
	padding:5px;
    background-repeat: no-repeat;
    background-position: 10px center;
}
.info {
	border-color: #00529B;
    background-color: #BDE5F8;
}
.success {
    border-color: #4F8A10;
    background-color: #DFF2BF;
}
.warning {
    border-color: #9F6000;
    background-color: #FEEFB3;
}
.systemWarning {
    border-color: #9F6000;
    background-color: #FEEFB3;
}
.error {
    border-color: #D8000C;
    background-color: #FFBABA;
}

.systemError {
    border-color: #D8000C;
    background-color: #FFBABA;
}

.settingsLabel {
	font-weight:bold;
}


textarea.errorHighlight{background-color:red}

#summaryData {
        
		padding: 2px;
}

#buttons {
	padding-top:5px;
	float: left;
}

#addNewButton {
	background-color: #3BAF4A;
	color: #FFFFFF;
	border-radius: 5px;
	font-weight: bold;
	border: 1px solid #3BAF4A;
	margin-left: 5px;
	cursor: pointer;
}

#okButton, #searchFieldButton, #authButton, #reAuthButton, #deleteButton:enabled, #saveButton:enabled, #smtp_saveButton:enabled, #proxy_saveButton:enabled, #prefix_saveButton:enabled, #mrconfig_saveButton:enabled, #xmpp_saveButton:enabled, #savePurgeButton:enabled, #saveReportingUserButton:enabled {
	background-color: #000000;
	color: #FFFFFF;
	border-radius: 5px;
	font-weight: bold;
	border: 1px solid #000000;
	margin-left: 5px;
	cursor: pointer;
}

#deleteButton:disabled, #saveButton:disabled, #smtp_saveButton:disabled, #proxy_saveButton:disabled, #prefix_saveButton:disabled, #mrconfig_saveButton:disabled, #xmpp_saveButton:disabled, #savePurgeButton:disabled, #saveReportingUserButton:disabled {
	background-color: #e2e2e2;
	color: #8d8d8d;
	border-radius: 5px;
	font-weight: bold;
	border: 1px solid #e2e2e2;
	margin-left: 5px;
	cursor: pointer;
}

#cancelButton, #editCancelButton, #smtp_editCancelButton, #proxy_editCancelButton, #prefix_editCancelButton, #mrconfig_editCancelButton, #xmpp_editCancelButton, #editPurgeCancelButton, #editReportingUserButton {
	background-color: #e2e2e2;
	color: #000000;
	border-radius: 5px;
	font-weight: bold;
	border: 1px solid #e2e2e2;
	margin-left: 5px;
	cursor: pointer;
}

#detailsForm {
		overflow-x:hidden;
		padding: 2px;
}

.content {
	overflow-y:auto;
	height: 500px;
}

.scroll {
  overflow-y: scroll;
}

.gadgetHeader {
 width:100%;
 padding-bottom: 5px;
}

.gadgetHeader:after {
   content: ".";
   visibility: hidden;
   display: block;
   height: 0;
   clear: both;
}

.showSettingsHeader {
	overflow-y:hidden;
	padding-bottom:5px;
}

.footer {
	padding-top: 5px;
}

.status {
	float:right;
	padding: 3px 0px 0px 0px;
}

#postList {
		overflow-x:hidden;
		overflow-y:hidden;
		padding: 0px 2px 2px 2px;	
}

input.error {
	border: 1px solid red;
}

.postEntry:hover .statecontrols {
	/* opacity: 1.0; */
}

.statecontrols {
	display: inline-block;
	float: right;
    border:0;
    margin-right:0px;
    margin-left: auto;
	margin-top: 2px;
	margin-bottom: 2px;
	/* opacity: 0.01; */
}

.statecontrols IMG {
    border:0;
    width:18px;
    height:18px;
    margin-right:0px;
    padding: 0px 5px 0px 5px;
}

IMG.statusIcon {
	border:0;
	width:16px;
	height:16px;
	margin-right:0px;
	padding: 0px 2px 0px 1px;
}




IMG.serverStatusIcon{
	border:0;
	width:16px;
	height:16px;
	margin-right:0px;
	padding: 0px 0px 0px 1px;
	vertical-align:bottom;
}

/* social contact type icon in campaign results*/
IMG.contacticon {
	border:0;
	width:16px;
	height:16px;
	margin-right:0px;
	padding: 4px 4px 0px 1px;
	vertical-align:bottom;
}

.contacticondiv {
	float: left;
	vertical-align: middle;
	display: inline;
	padding: 0 6px 0 6px;
}

/* What i want here is everything that's left after rendering the contacticondiv above. 
	96% works with the current campaign results gadget width. 
	Not sure how else to do it */
.contactcontent {
	float: left;
	vertical-align: middle;
	display: inline;
	width: 96%; 	
}

.throughputGradient {
	border:0;
	width:130px;
	height:30px;
	vertical-align:middle;
	display:inline-block;
}

.throughputGraph {
	width:130px;
	height:30px;
	position:relative;
	right:133px;
	vertical-align:middle;
	display:inline-block;
}

.contactstate {
    float:right;
	vertical-align: middle;
	height: 22px;
	display: inline;
	margin: 2px 2px 2px 2px;
	overflow-x:hidden;
	text-overflow:ellipsis;
}

.updated, .author {
	float: left;
	vertical-align: middle;
	display: inline;
	font-size:10px;
	color: #999999;
}
.author {
	width:450px;
	overflow-x:
	hidden;
	text-overflow:ellipsis;
	color: #999999;
}

.trainingResponse, .tagResponse {
	text-align: center ;
	padding: 1px 5px;
	border: 1px solid;
	border-color: #4F8A10;
	background-color: #DFF2BF;
	margin: 2px 2px 2px 2px;
	float: left;
}

.tagResponse {
	margin-left: 5px;
}

.verticalSeparator {
	display: inline-block;
	border-left: 2px solid;
	border-color: #8499A2;
	height:18px;
}

.trainingHeading {
	
	padding-right: 40px;
}

.tags {
	clear: both;
	margin-top: 5px;
	width: 100%;
}


.tags input[type="text"] 
{
  width: 100px;
}

.search input[type="text"] {
	margin-top: 7px;
  width: 800px;
}

.postEntry:hover input[type="text"]
{
	border: 1px solid;
	border-color: #407BB3;
	
}

.postEntry input[type="text"] {
	border: 1px solid;
	border-color: #407BB3;
}

.postEntry button {

}

.postEntry:hover {
	background-color: #EEF3F8;
	width: 100%;
}

.postEntry a, .postEntry a:link, .postEntry a:visited {
	color:#333399;
	text-decoration: none;
	font-size: 13px;
}

.postEntry a:hover {
	text-decoration: underline;
}

.postEntry {
	width: 100%;
	padding-bottom: 5px;
	border-top: thin outset #407BB3; 
}
/*
 Because the postEntry div only contains other divs that are floated it has no height. 
This adds content to it that is hidden that makes it take up space
*/
.postEntry:after {
   content: ".";
   visibility: hidden;
   display: block;
   height: 0;
   clear: both;
}


.suggestedTagsWrapper {
	
	height: 20px;
}

.suggestedTags
{
  display:inline;
  list-style:none;
  padding:0px;
}
.suggestedTags li {
  display:inline;
}

.tagSuggestion {
	color:#555599;
	text-decoration: none;
}


.tagSuggestion:hover {
	text-decoration: underline;
	cursor: pointer;
}

.postEntry:hover .suggestedTags {
}

.currentTags {
}

.postEntry:hover .addTags {
  visibility: inherit;
/*	opacity: 1.0;
	-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)";*/
}

.postEntry .addTags {
  visibility: hidden;
/*	opacity: 0.01;
	-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";*/
}

/*  ---- chat transcript dialog START ---- */
.clearer {
	clear:both;
}

#chat_transcript_wrapper {
	background:#F8F8F8;
	border:1px solid #E8E8E8;
	word-wrap: break-word;
}
#chat_transcript_header {
	border-bottom:1px solid #E8E8E8;
	padding:1px;
	background-color: #E8E8E8;
}
#chat_transcript_footer {
	border-top:1px solid #E8E8E8;
	background-color: #E8E8E8;
	padding:1px;
}
#chat_transcript_chatSummary {
	width:280px;
	float: left;
	padding:10px;
	border-right:1px solid #E8E8E8;
	word-wrap: break-word;
}
#chat_transcript_customerSummary {
	margin-left:300px;
	border-left:1px solid #E8E8E8;
	padding:10px;
	line-height:2em;
	word-wrap: break-word;
}
.chat_transcript_bgr {
	  background:#ffffff !important; 
      display: inline-block ;
      border: 1px solid #B0B0B0;
}
.chat_transcript_line {
    display:inline;
}

.chat_agent {
    color: #000000 ;
    font-weight: bold;  
    word-wrap: break-word; 
}

.chat_customer {
    color: #0088C2 ;
    font-weight: bold;   
    word-wrap: break-word;
}
/*  ---- chat transcript dialog END ---- */

.summary {
	width: 100%;
	margin-bottom: 2px;
	word-wrap:break-word;
}

.chatMetadata {
	width: 100%;
	margin-bottom: 12px;
	word-wrap:break-word;
}

.tag,.proxyExcludeTag {
	display: inline-block;
	border-color: #AEB8BC;
	background:none repeat scroll 0 0 #DFF4FF;
	border:1px solid #A7CEDF;
	
	margin-bottom: 3px;
	margin-right: 3px;
	padding:2px 3px 2px 3px;
	
	-moz-border-radius: 5px;
	-webkit-border-radius: 5px;
	-khtml-border-radius: 5px;
}

.fadedImg {
	opacity:0.4;
	filter:alpha(opacity=40); /* For IE8 and earlier */
}

#pendingResultsContainer {
	height: 20px;
	width: 100%;
	margin-top: 2px;
	padding-bottom: 5px;
}

#pendingResults {
	display: inline-block;
	border-color: #AEB8BC;
	background:none repeat scroll 0 0 #DFF4FF;
	width: 100%;
	text-align: center;
	line-height: 20px;	
	cursor: pointer;
	-moz-border-radius: 5px;
	-webkit-border-radius: 5px;
	-khtml-border-radius: 5px;
}

#pendingResults:hover {
	text-decoration: underline;		
}

.proxyExcludeTag, .verticalTag
{
  display: block;
  min-width: 15em;
}

img.deleteTag,img.deleteProxyExcludeTag {
	width: 8px;
	height: 8px;
	margin-left: 3px;
	cursor: pointer;
}

img.deleteProxyExcludeTag, img.deleteVerticalTag 
{
  float:right;
  vertical-align: center;
  margin: 3px;
}

td.rb {
	text-align: right;
    vertical-align: bottom;
}

#loadingIndicatorMessage, .progressSpan {
	display: inline-block;
	margin-left: 10px;
	vertical-align: super;
	color:#407BB3;
	font-size:14px;
}

#loadingIndicator, .progressMessage {
	display: inline-block;
	border:2px solid #ccc;
	margin: 10px; 
	padding: 10px;
	max-width: 300px;
	background-color: white;
	position: absolute;
	
	-moz-border-radius: 20px;
    -webkit-border-radius:20px;
    -khtml-border-radius:20px;
    -moz-box-shadow: 0 1px 5px #333;
    -webkit-box-shadow: 0 1px 5px #333;
}

#loadingIndicator IMG, .progressMessage IMG {
	height: 30px;
	width: 30px;
	background: transparent;
}

.signinOverlay, #loadingOverlay, .progressLayer {
    position:fixed;
    top:0px;
    bottom:0px;
    left:0px;
    right:0px;
    z-index:100;
}

.signinOverlay {
	background: url(../img/overlay.png) repeat top left;
}

.signinBox{
    position:fixed;
    top:-325px;
    left:30%;
    right:30%;
    background-color:#fff;
    color:#7F7F7F;
    padding:20px;
    border:2px solid #ccc;
    -moz-border-radius: 20px;
    -webkit-border-radius:20px;
    -khtml-border-radius:20px;
    -moz-box-shadow: 0 1px 5px #333;
    -webkit-box-shadow: 0 1px 5px #333;
    z-index:101;
}

.signinBox h1
{
    border-bottom: 1px dashed #7F7F7F;
    margin:-20px -20px 0px -20px;
    padding:10px;
    background-color:#eef3f8;
    color:#407BB3;
    -moz-border-radius:20px 20px 0px 0px;
    -webkit-border-top-left-radius: 20px;
    -webkit-border-top-right-radius: 20px;
    -khtml-border-top-left-radius: 20px;
    -khtml-border-top-right-radius: 20px;
}

.signinBox input[type="text"], .signinBox input[type="password"] {
	width: 155px;
}
  
/*
admin settings
*/  
  .adminSettings input[type="text"]
{ 
  margin: 1px;
  width: 300px;
 }
 
  .adminSettings input[type="password"]
{ 
  margin: 1px;
  width: 300px;
 }
 
   .adminSettings input[type="checkbox"]
{ 
  margin: 1px; 
 }

.adminSettings td
{ 
  margin: 1px; 
  height: 28px;
 }

 
.inputRow {
	clear: both;
	height: 28px;
}

.inputRow label {
	display: inline-block;
	float: left;
	min-width: 16em;
	text-align: left-center;
	margin: 1px;
	vertical-align: middle;
}

.inputRow input[type="text"] {
	margin: 1px;
}
 
 .adminSettings label 
{
  display: inline-block;
  float: left;
  min-width: 14em;
  height: 28px;
  text-align: left-center;
  margin-right: 7px;
  text-align: right;
}

  .adminSettings span
{
	float: left;
	width: 350px;
	word-wrap: break-word; 
}



#purgeSettings label {
	min-width: 24em;
	margin-right: 5px;
	text-align: right;
}

#reportingUserSettings label {
	min-width: 14em;
}

#purgeSettings input[type="text"] {
	width: 60px;
}

.server_status {
	margin: 20px 0;
	float: left;
}

ul {
	margin: 0px;
	padding-left: 14px;
}

.server_status label{
	display:block;
	width:100%;	
}

.server_status table {
	float:left;
	margin-right: 25px;
}



.server_status ul li label {
	display: inline-block;
}



.system_stats{
	clear:both;
	margin-top:20px;	
}

 .system_list_items ul li label 
{
display: inline-block;
min-width: 185px;
 
}
 .valueDiv 
{
display: inline-block;
min-width: 50px;
 
}

.drawer_title {
	clear: both;
	margin-top: 10px;
}

.drawer_title IMG {
	width: 10px;
	height: 10px;
	cursor: pointer;
}

div.drawer {
	float: left;
	margin: 10px 0 5px 14px;
	padding-bottom: 10px;
	border-bottom: thin solid #407BB3;
        width: 550px;
}

.heading 
{
	color:#407BB3;
	font-size:14px;
}

.heading:hover 
{
	color:#407BB3;
	text-decoration: underline;
	cursor: pointer;
}

.campaignResultsSettingsLayer
{
	float: left;
	margin-left: 5px;
	width: 99%;
}

.campaignResultsBoxes
{
	width:400px;
	height:110px;
}

.campaignResultsSettingsHeader {
	font-size:14px;
	font-weight:bold;
	display: block;
	margin-top:15px;
    margin-bottom:5px;	
}

.firstHeader {
	margin-top: 0px;
}

.campaignResultsCheckBox {
	margin: 0px;
	margin-bottom:4px;
	
}

.example {
	color:#888888;
	font-size:10px;
	vertical-align: middle;
}

.staticInfoText {
	margin-left: 20px;
	width: 100%;
}

#sampleCodeDrawerContents {
	border: 1px solid #7F7F7F;
	border: thin solid #407BB3;
	margin-top: 10px;
	margin-left: 15px;
	margin-right: 15px;
}

#sampleCodeDisplayHeader {
	background-color: #eef3f8;
	font-size: 14px;
	padding: 3px;
}

#sampleCodeDisplayContent {
	padding: 3px;
}

ul.topnav {
	list-style: none;
	padding: 0;
	margin: 0;
	float: left;
	z-index: 10;
}
ul.topnav li {
	cursor: pointer;
	float: left;
	margin: 0;
	padding: 1px 5px 1px 5px;
	position: relative; /*--Declare X and Y axis base for sub navigation--*/
	font-size: 14 px;
	max-width:450px;
	border: 1px solid #EEF3F8;
	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
}
ul.topnav li:hover{
	border: 1px solid #407BB3;
}
ul.topnav li span.menuTitle {
	float: left;
	overflow-x: hidden;
	white-space: nowrap;
	max-width: 430px;
}
ul.topnav li span.arrow { /*--Drop down trigger styles--*/
	width: 12px;
	height: 12px;
	float: right;
	background: url(../img/drawerTriangleOpen.png) no-repeat center center;
}
ul.topnav li ul.subnav {
	font-size: 14px;
	list-style: none;
	position: absolute;
	left: 0; 
	top: 22px;
	background: #fff;
	margin: 0; padding: 0;
	display: none;
	float: left;
	border: 1px solid #407BB3;
	max-height: 500px;
	max-width: 650px;
	-webkit-border-radius: 5px;
	-webkit-border-top-left-radius: 0;
	-moz-border-radius: 5px;
	-moz-border-radius-topleft: 0;
	border-radius: 5px;
	border-top-left-radius: 0;
	overflow-x: hidden;
	overflow-y: auto;
	text-overflow: ellipsis;
	white-space: nowrap;
}
ul.topnav li ul.subnav li:first-child{
	border: none;
}
ul.topnav li ul.subnav li{
	display: inline;
	margin: 0; padding: 0;
	padding-right: 3px;
	padding-bottom: 2px;
	border: none;
	border-radius: 0;
	-webkit-border-radius: 0;
	-moz-border-radius: 0;
	border-top: 1px solid #407BB3;
	clear: both;
	cursor: pointer;
	width:100%;
	max-width:650px;
}
ul.topnav li ul.subnav li:hover{
	background: #EEF3F8;
}
html ul.topnav li ul.subnav li span {
	float: left;
	padding-left: 5px;
	padding-right: 20px;
	background: none;
}


.notificationRow {
	clear: both;
	height: 28px;
}

.notificationRow label {
	display: inline-block;
	float: left;
	min-width: 10em;
	text-align: left-center;
	margin: 1px;
	vertical-align: middle;
	margin-left: 1em; 
}

.notificationRow input[type="text"] {
	margin: 1px;
	width: 60%;
}

.notificationRow input[type="password"] {
	margin: 1px;
	width: 60%;
}

.notificationRow select {
	margin: 1px;
	width: 61%;
}

.notificationRow textarea {
	margin: 1px;
	width: 61%;
}

.addressList
{ 
  margin-left: 10em;
  overflow:auto;
  width: 62%;
 }
 
 /* DataTable styles */

table.display {
	clear: both;
	margin-top: 5px;
	margin-bottom: 5px;
	width: 100%;
	border: 1px solid #CCCCCC;
	border-collapse:collapse;
}

table.display thead th {
	padding: 5px;
	background-color: #f2f2f2;
	font-weight: bold;
	border: 1px solid #b9b9b9;
}

table.display td {
	padding: 4px;
	border: 1px solid #b9b9b9;
}

table.display td.center {
	text-align: center;
}

tr.even {
	background-color: #fafafa;
}

.sorting, .sorting_asc, .sorting_desc { 
	cursor: pointer;
}

.sorting_asc {
	background: url('../img/sort_asc.png') no-repeat center right;
}

.sorting_desc {
	background: url('../img/sort_desc.png') no-repeat center right;
}

.sorting {
	background: url('../img/sort_both.png') no-repeat center right;
}

.dataTables_filter {
	float: right;
	font-size: 10px;
    margin-bottom: 10px;
}

.dataTables_info {
	float: right;
	font-size: 10px;
	line-height: 22px;
}

#autoTags {
	width: 455px;
	min-height: 86px;
	padding-bottom: 3px;
	overflow: auto;
}

.field {
	width: 75%;
}

.listbuilder {
    margin-top: 3px;
    width: 96%;
}

.listbuilder legend {
	font-size: 12px;
    font-weight: normal;
	top: -.1em;	
}

.listbuilder input[type="text"] {
	margin-bottom: 7px;
	margin-top: 7px;
	width: 240px;
	font-size: 12px;	
}

.listbuilder_list {
	word-wrap: break-word;
}

.verticalSeparator {
    border-color: #8499A2;
    border-left: 2px solid #8499A2;
    display: inline-block;
    height: 18px;
}

table.config {
    width:100%;
}
table.config td {
    vertical-align: middle;
    padding-left: 0px 12px 12px 12px;
    line-height: 2.5em;
}
table.config input[type="checkbox"] {
    margin: 0px;
}
.config-element {
    width: 400px;
}
.config-section {
    width: 100%;
    color: #407BB3;
    font-size: 13px;
}
.config-group {
    font-size: 13px;
}
.config-label {
    font-size: 13px;
    padding: 0px 3px 3px 15px;
    text-align:right;
}
hr {
    border: 0;
    height: 1px;
    background: #407BB3
}

.placeholder {
  text-color: #AAA;
}


	IMG.twitterIcon 
{
    border: 0 none;
    height: 24px;
    margin-right: 5px;
    padding: 0px;
    vertical-align: bottom;
    width: 24px;
}

.twitterReply 
{
    border: 0px solid #E4E4E4;
    margin: 0px 10px 10px 10px;
}

.profile 
{    
    display: inline-block;
    padding: 0px 10px;
}

.profileTitleRow 
{
    vertical-align: top;
    margin: 0px 5px 15px 0px;
    padding: 0px;
    width: 100%;
}

a.profileTitle 
{
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
    padding: 0px;
    vertical-align: top;
    color: #0000FF;
    text-decoration: none;
    font-size: 13px;
    font-weight: bold;
    text-align: left;
}

a.profileTitle:hover 
{
    cursor: pointer;
    text-decoration: underline;
}

a.profileTitle:visited 
{
    color: #0000FF;
    text-decoration: none;
}

.profilePicture 
{
    float: left;
    padding-bottom: 2px;
    padding-left: 33px;
}

.facebookProfilePicture
{
	padding-bottom: 0px;
	padding-left: 5px;
}

.profileDetail 
{
    margin-left: 95px;
}

.profileText
{
    display: inline-block;
    font-size: 12px;
    line-height: 16px;
    padding-bottom: 4px;
    text-align: left;
    vertical-align: middle;
    width: 100%;
}

.profileName 
{
    .profileText;
    font-size: 14px;
    font-weight: bold;
    padding-bottom: 2px;
}

.profileHandle 
{
    .profileText;
    font-weight: normal;
    font-size: 13px;
    color: #999999;
    padding-bottom: 10px;
}

.profileFollowersText
{
    color: #999999;
}

.profileUrl
{
    .profileText;
    padding-bottom: 10px;
    display: inline-block;
    font-size: 12px;
    line-height: 16px;
    text-align: left;
    text-decoration: none;
    vertical-align: middle;
    width: 100%;
}

.profileUrl:hover
{
    cursor: pointer;
    text-decoration: underline;
}

.separatorLine 
{
    border:0;
    height:1px;
    background:#E4E4E4
}

.twitterReplyAccount 
{
    display: inline-block;
    color: #333333;
    margin-left: 105px;
    margin-bottom: 10px;
}

.accountRow
{
    vertical-align: middle;
    float: left;
    font-size: 13px;
    width:100%;
    height:100%;
}

IMG.infoIcon 
{
    height:16px; 
    width:16px;
    vertical-align: -20%;
}

.infoText 
{
    font-size: 11px;
}

.twitterReplyConversation 
{
    overflow: auto;
    border-style:solid;
    border-width:1px;
    border-color: #D7D7D7;
    display: inline-block;
    background-color: #E4E4E4;
    width: 100%;
}

.conversationPane {
    margin: 10px;
    border: 1px solid #E4E4E4;
    border-radius: 5px;
    background-color: white;
    float: left;
    width: 97.5%;
    overflow: scroll;
    overflow-x: hidden;
    overflow-y: visible;
    max-height: 220px;
}

.conversation 
{
    padding: 0px 30px 10px 30px;
}

.conversationTitle 
{
    padding: 10px;
    color: #999999;
    font-weight: bold;
    padding-bottom: 2px;
}

.conversationItem 
{
    padding: 15px 0px;
}

.conversationItemLink 
{
    margin-right: 275px; 
    padding: 5px 0px;
}

.conversationItemTime 
{
    .profileText;
    font-size: 10px;
    font-weight: normal;
    color: #999999;
}

.actionGroup 
{
    float: right; 
    font-weight: normal;
}

.actionName 
{
	vertical-align:top;
}

.actionName:hover
{
    text-decoration:underline;
}

.replyAction
{
    color: #0099FF;
    cursor: pointer;
    font-size: 12px;
    padding-left: 15px;
}

.twitterAuthor 
{
    font-size: 14px;
    font-weight: bold;
    height: 22px;
    line-height: 16px;
    padding-top: 1px;
    text-align: left;
    vertical-align: middle;
    width: 100%;
}

.repliedToTweet
{
    bottom: 0;
    padding-left: 5px;
    padding-right: 5px;
    width: 480px;
}

.retweetedTweet
{
    padding-left: 5px;
    padding-right: 5px;
    width: 490px;
    background: white;
}

.authorSmall
{
    display: inline-block;
    font-weight: bold;
    font-size: 12px;
    height: 20px;
    line-height: 14px;
    padding-top: 1px;
    text-align: left;
    vertical-align: bottom;
    width: 100%;
}

.descriptionSmall
{
    display: inline-block;
    font-weight: normal;
    font-size: 12px;
    line-height: 14px;
    padding-top: 1px;
    padding-bottom: 5px;
    text-align: left;
    vertical-align: bottom;
    width: 100%;
}

.draggableDialog
{
	background-color:white;
    visibility: hidden;
    border-color:  #407BB3;
    border-style: solid;
    border-width: medium;
    position: absolute;
    top: 50px;
    left: 10px;
    width: 500px;
}

.draggableDialogHeader
{
    position:absolute;
    top:0px;
    left:0px;
    width: 493px;
    height:25px;
    cursor:move;
    background-color:#EEF3F8;
    font-weight:bold;
    padding-top: 5px;
    padding-left: 7px;
}

.innerDialog
{
    margin:30px 0px 0px 0px;
    background-color:white;
    height:auto;
}

.closeDialog
{
    cursor:pointer;
    position:absolute;
    top:2px;
    right:5px;
    font:bold 16px/18px Tahoma,sans-serif;
    color:#000000;
}

.tweetArea
{
    font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
    font-size:12px;
    line-height:16px;
    padding-left:8px;
    padding-top:2px;
    vertical-align:middle;
    margin:5px 0px 5px 0px;
    width:585px;
    min-width: 585px;
    max-width: 585px;
    height:100px;
    min-height: 100px;
    max-height: 100px;
}

.dialogButtons
{
    display: block;
    padding: 7px 0 7px 0;
    text-align: right;
    width: 585px;
}

.invitationButton
{
	/*float:left;*/
}

.sendButton
{
    right:5px;
}

.tweetButton
{
    padding-right: 5px;
    padding-left: 5px;    
}

.retweetButton
{
	margin-right: 15px;
	margin-bottom: 5px;
}

#retweetDialog
{
	overflow-x: hidden;
}

.countDown
{
    text-align: right;
    padding-right: 5px;
    padding-left: 5px;
}

.progressLayer
{
    visibility: hidden;
}

.progressMessage
{
	
	width: 200px;
}

.author
{
    display: inline-block;
    font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
    font-weight: bold;
    font-size: 14px;
    padding-top: 20px;
    text-align: left;
    vertical-align: middle;
    width: 100%;
}

.facebookAuthor
{
	border-top: none;
	padding-top: 0px;
    color: #222222;
}

.postEntry, .postEntry:hover
{
	background-color: #EDEFF4;
	padding: 5px;
	width: 850px;
}

.reply
{
	background-color: #E4E4E4;
	padding: 20px 20px 30px;
	width: 100%;
	height: 113px;
}

.reply textarea
{
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
	font-size:12px;
	width: 100%;
	max-width: 825px;
	max-height: 100px;
	height: 75px;
	margin-bottom: 10px;
}

.age 
{
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
	font-size:11px;
	vertical-align: middle;
	display: block;
	color: #999999;
}

.like
{
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
	font-size:11px;
	color: #6699FF;
	cursor: pointer;
	padding-top: 3px;
	padding-left: 75px;
	height: 18px;
}

.like:hover
{
	text-decoration: underline;	
}

.replyBody
{
	padding-left: 15px;
}

.socialContact
{
    padding: 20px;
    border: 1px solid #D7D7D7;
    -moz-border-radius: 4px 4px 0px 0px;
	-webkit-border-radius: 4px 4px 0px 0px;
	-khtml-border-radius: 4px 4px 0px 0px;
	border-radius: 4px 4px 0px 0px;
}

.details
{
	padding-left: 40px;
	padding-top: 20px;
}

.postDetails
{
	padding-left: 75px;
}

.description
{
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;
	font-size:12px;
	width: 100%;
	margin-bottom: 2px;
	margin-top: 10px;
	word-wrap:break-word;
	overflow:auto;
	max-height: 100px;
}

IMG.contacticon {
	border:0;
	width:24px;
	height:24px;
	margin-right:5px;
	padding: 0px 4px 0px 0px;
	vertical-align:top;
}

.replyButtons
{
	float: right;
	padding-right: 50px;
}

/* BEGIN _ Follow button style*/

.followButtonIcon
{
	background-image: url("../../img/twitter-bird-light-bgs.png");
	background-position: center center;
    background-size:20px 20px;
    margin-left:-10px;
    padding-right:20px;
    margin-bottom:-5px;
}

.followButton {
	width: 75px ;
	height: 20px;
	display: inline-block;
	zoom: 1; /* zoom and *display = ie7 hack for display:inline-block */
	*display: inline;
	vertical-align: baseline;
	margin: 0 0px;
	outline: none;
	cursor: pointer;
	text-align: center;
	text-decoration: none;
	font: 11px/100% Helvetica Neue, Arial, sans-serif;
    font-weight: bold;
	padding: 0.25em 0em .30em .3em;
	text-shadow: 0 1px 1px rgba(255,255,255,.5);
	-webkit-border-radius: .4em; 
	-moz-border-radius: .4em;
	border-radius: .4em;

	-webkit-box-shadow: 0 1px 2px rgba(0,0,0,.2);
	-moz-box-shadow: 0 1px 2px rgba(0,0,0,.2);
	box-shadow: 0 1px 2px rgba(0,0,0,.2);
}

/* white */
.whiteButton {
	color: #333333;
	border: solid 1px #b7b7b7;
	background: #fff;
	background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#DDDDDD));
	background: -moz-linear-gradient(top,  #fff,  #ededed);
	filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#ededed');
}
.whiteButton:hover {
	background: #ededed;
	background: -webkit-gradient(linear, left top, left bottom, from(#FAFAFA), to(#dcdcdc));
	background: -moz-linear-gradient(top,  #fff,  #dcdcdc);
	filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#dcdcdc');
}
/* red */
.redButton {
	color: #FFFFFF;
	border: solid 1px #980c10;
	background: #d81b21;
	background: -webkit-gradient(linear, left top, left bottom, from(#ed1c24), to(#aa1317));
	background: -moz-linear-gradient(top,  #ed1c24,  #aa1317);
	filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#ed1c24', endColorstr='#aa1317');
}
/* blue */
.blueButton {
	color: #FFFFFF;
	border: solid 1px #0076a3;
	background: #0095cd;
	text-shadow: 0 -1px 1px rgba(0,0,0,.25);
	background: -webkit-gradient(linear, left top, left bottom, from(#33BCEF), to(#019AD2));
	background: -moz-linear-gradient(top,  #33BCEF,  #019AD2);
	filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#00adee', endColorstr='#0078a5');
}
/* END - Follow button style*/

body 
{
	font-family:Arial,Helvetica,"Lucida Grande",Verdana,sans-serif;;
}
</style>

<script type="text/javascript" src="https://172.31.5.56/templates/reply/../../js/3rdparty/sarissa/sarissa-full-0.9.9.4/gr/abiss/js/sarissa/sarissa.js"></script>
<script type="text/javascript" src="https://172.31.5.56/templates/reply/../../js/3rdparty/jquery.js"></script>
<script type="text/javascript" src="https://172.31.5.56/templates/reply/../../js/3rdparty/jquery-ui.custom.min.js"></script>
<script type="text/javascript" src="./js/ccp-base.js"></script> 
<script type="text/javascript" src="./js/ccp-twitter.js"></script> 
<script type="text/javascript">

(function(){
//
// Constants
//

// Type values for CCP Twitter Account and Twitter Search feeds
// 
var TWITTER_STREAM_TYPE = 3;
var TWITTER_ACOUNT_TYPE = 6;
var TWITTER_SEARCH_TYPE = 9;

// Maximum number of characters in a tweet
//
var MAX_TWEET_LEN = 140 ;

var DIRECT_MESSAGE_PREFIX = "Direct message:" ;

var ACCOUNT_NAME_KEY = "accountName" ;


// File-Scope Variables
//
var ccpSession   = null ;
var conversation = null ;
var profile      = null ;
var agent        = null ;

var author = null ;
var timestamp = null ;
var contactId = null ;
var contactStatus = null;
var contactDraft = null;
var contactAction = null;
var contactStatusUserId = null;


// References to UI elements
//
var followButton = null ;
var accounts     = null ;

var RETWEET_ACTION      = "retweetAction" ;
var REPLY_ACTION        = "draft_action_reply" ;
var DM_ACTION           = "draft_action_dm" ;
var TWITTER_STATUS_REASON = "twitter_reply";


/**
 * Return the value for the given key stored in the cookie
 */
function getFromCookie(key)
{
	var keyEquals = key + "=" ;
	var cookies = document.cookie.split(';') ;
	for ( var i = 0 ; i < cookies.length ; i++ )
	{
		var cookie = cookies[i] ;
		while ( cookie.charAt(0) == ' ')
		{
			cookie = cookie.substring(1, cookie.length) ;
		}
		
		if ( cookie.indexOf(keyEquals) == 0 )
		{
			return cookie.substring(keyEquals.length, cookie.length) ;
		}
	}
	
	return null ;
}

/**
 * Trim excess content from the author's name. An author of a Twitter contact
 * should not contain spaces.
 */
function trimAuthor(author)
{
    if ( author != null )
    {
        var space = author.indexOf(' ') ;
        if ( space != -1 )
        {
            author = author.substring(0, space) ;
        }
    }

    return author ;
}        

/**
 * Disable the reply template UI. This is done when the account is rate-limited.
 */
function disableUI(disabled)
{
    if ( disabled )
    {
        agent.disable() ;
        conversation.disable() ;
    }
    else
    {
        ccpSession.clearError() ;
        
        agent.enable() ;
        conversation.enable() ;
    }    
}

/**
 * Set the given key/value pair in the cookie
 */
function setInCookie(key, value)
{
	var curDate = new Date() ;
	
	// Expire in 30 days
	//
	var expiresDate = new Date(curDate.getTime() + (1000 * 60 * 60 * 24 * 30)) ;
	document.cookie = key + "=" + value + "; expires=" + expiresDate.toGMTString() + "; path=/" ;
}

/**
 * Send a reply using the selectedAccount.  The text in the reply area is used
 * as the text of the message.
 */
function retweet(tweetId)
{
    var selectedAccount = accounts.options[accounts.selectedIndex].value ;
    
    showProgressMessage("__MSG_twitter_reply_retweet_progress__") ;
    
    var retweetCallback = function(response)
    {
        hideProgressMessage() ;
        
	if(ccp.twitter.handleRateLimit(ccpSession,response,selectedAccount,null,true)) {
		return;
	}
	
        var error = ccp.utils.getErrorDetails(response) ;
        if ( error != null )
        {
            ccpSession.showError("__MSG_twitter_reply_retweet_failed__ " + selectedAccount + "<br>" + error);
            
            return ;
        }

        setInCookie(ACCOUNT_NAME_KEY, selectedAccount) ;

		// When developing a custom reply template, in lieu of ccp.const.TWITTER_REPLY below, send either  
		//  ccp.const.CUSTOM_REPLY or nothing (which will default to ccp.const.ccp.const.CUSTOM_REPLY).
		//  e.g.  	
		//			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED, ccp.const.CUSTOM_REPLY);
		//  or
		// 			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED);
        ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED, ccp.const.TWITTER_REPLY) ;
    }
    ccp.twitter.twitterRetweet(ccpSession, selectedAccount, tweetId, retweetCallback) ;
}

/**
 * Retweet the tweet with the given ID
 */
function sendRetweet(tweetId)
{
    ccpSession.clearError();
    
    $("#retweetDialog").dialog('close');
    
    showProgressMessage("__MSG_twitter_reply_retweet_progress__") ;
    
    retweet(tweetId) ;
}

/**
 * Display the social contact with the given ID in the retweet dialog
 */
function showRetweetDialog(contactId)
{
    var contact = conversation.urlToContactMap[contactId] ;

    document.getElementById("retweetDialog_author").innerHTML = contact.author ;
    
    if ( ccp.utils.isEmptyString(contact.description) )
    {
        document.getElementById("retweetDialog_description").innerHTML = contact.title ;
    }
    else
    {
        document.getElementById("retweetDialog_description").innerHTML = contact.description ;
    }
    
    $("#retweetDialog_sendButton").on("click",function(){ sendRetweet(contact.tweetId); });
    
    $("#retweetDialog").dialog('open');
}


function updateInvitationInMessage( action, selectedAccount, message, contact){

	var success = function (msgObj){
		if(action === "reply") {
			$("#replyDialog").dialog('close');
    		showProgressMessage("__MSG_twitter_reply_reply_progress__") ;
			reply(selectedAccount, msgObj, contact.tweetId);
		} else if (action ==="dm") {
			$("#dmDialog").dialog('close');
		    showProgressMessage("__MSG_twitter_reply_dm_progress__") ;
			directMessage(selectedAccount, contact.author, msgObj) ;
		}
	};
	var error = function(error) {
		ccp.log(error);
		if(typeof error === "string") {
			ccp.twitter.showDialogErrorMessage(action,error) ;
		}
	} ;

	ccp.twitter.updateChatInvitationLinkInMessage(ccpSession,message,contact, success,error);
}
/**
 *  Update Invitation stats in social contact
 */
function updateInvitationStatusOfContact(close, failureOccured) {
	var postData =	"<SocialContact>\n" +
					"  <statusTimestamp>" + timestamp + "</statusTimestamp>\n" +
					"  <inviteStatus>sent</inviteStatus>\n" +
					"</SocialContact>" ;
						
	var scCallBack = function(response){	
			if(response.rc != 200) {
				ccp.log("Error while updating invitation status for SC [" 
							+ ccpSession.restSocialContact + "]. Response Code:" + response.rc);
				failureOccured=true;			
			} 
			if(failureOccured)	{
							alert('__MSG_twitter_error_setting_invitation_status__');
			}
			
		close();		
		
	};
	ccp.base.makeAPIRequest(ccpSession, ccpSession.restSocialContact, gadgets.io.MethodType.PUT, scCallBack, postData) ;
}
/**
 *  If short URL is present in message then make it active after response was sent
 */
function makeShortURLActive(msgObj,close){
	if(msgObj.restShortURL) {
		var postData =	"<ShortURL>\n" +
						"  <active>true</active>\n" +
						"</ShortURL>" ;
		var shortURLCallBack = function(response){
			var failureOccured =false;
			if(response.rc != 200) {
				ccp.log("Error marking Short URL [" + msgObj.restShortURL + "] as active. Response Code :"+response.rc);
				failureOccured =true;
		 	}	
			updateInvitationStatusOfContact(close,failureOccured);
			
		};
		ccp.base.makeAPIRequest(ccpSession, msgObj.restShortURL, gadgets.io.MethodType.PUT, shortURLCallBack, postData) ;
		return;
	}
	close();

} 
/**
 * Send a reply using the selectedAccount.  The text in the reply area is used
 * as the text of the message.
 */
function reply(selectedAccount, msgObj, tweetId)
{
    var replyCallback = function(response)
	{
	    hideProgressMessage() ;
	    
	if(ccp.twitter.handleRateLimit(ccpSession,response,selectedAccount,null,true)) {
		return;
	}

        var error = ccp.utils.getErrorDetails(response) ; 
        if ( error != null )
        {
            ccpSession.showError("__MSG_twitter_reply_reply_failed__ " + selectedAccount + "<br>" + error) ;
            
            return ;
        }

		setInCookie(ACCOUNT_NAME_KEY, selectedAccount) ;
		
		var closeReply = function(){
			// When developing a custom reply template, in lieu of ccp.const.TWITTER_REPLY below, send either  
			//  ccp.const.CUSTOM_REPLY or nothing (which will default to ccp.const.CUSTOM_REPLY).
			//  e.g.  	
			//			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED, ccp.const.CUSTOM_REPLY);
			//  or
			// 			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED);
			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED, ccp.const.TWITTER_REPLY) ;
		};
		makeShortURLActive(msgObj,closeReply);
	}
	ccp.twitter.twitterReply(ccpSession, selectedAccount,  msgObj.message , tweetId, replyCallback);

}


function insertPlaceholder(elementId) {
	var selStart = $(elementId).prop("selectionStart");
	var selEnd =  $(elementId).prop("selectionEnd");
	
	var insertText = '<<'+'__MSG_twitter_reply_chat_invitation_link__'+'>>';
	var originalText = $(elementId).val();
	var originalTextLength = originalText.length;

	if (originalTextLength == 0) {
		$(elementId).val(insertText);
	}
	
	else {
		var newText = '';
		var newText = originalText.substring(0, selStart) + insertText + originalText.substring(selEnd,originalTextLength);
		$(elementId).val(newText);
	}
	
    setCursorPosition($(elementId)[0], $(elementId).val().length);	 	
}


/**
 * Reply to the given tweet
 */
function sendReply(contact)
{    
    ccpSession.clearError();
    
    var selectedAccount = accounts.options[accounts.selectedIndex].value ;
    updateInvitationInMessage("reply", selectedAccount, 
    						document.getElementById("replyDialog_text").value, contact);
    //reply(selectedAccount, document.getElementById("replyDialog_text").value, contact) ;
}

/**
* Sets the cursor position in a textarea element.  Note for firefox:  don't call until the element is visible
*/
function setCursorPosition(elem,start,end){
    if(!end) end=start;
    if(elem.setSelectionRange)
    {
        elem.focus();
        elem.setSelectionRange(start,end);
    }
    else if (elem.createTextRange) {
        var range = elem.createTextRange();
        range.collapse(true);
        range.moveEnd('character',end);
        range.moveStart('character',start);
        range.select();
    }
}


/**
 * Save message draft for the specific action
 */
function saveDraft(draft_action)
{    
    ccpSession.clearError();
    var message="";
    
    if(draft_action == REPLY_ACTION){
         message = document.getElementById("replyDialog_text").value ;
   		 $("#replyDialog").dialog('close'); 
   	}
   	
   	if(draft_action == DM_ACTION){
   	     message = document.getElementById("dmDialog_text").value ;
   		 $("#dmDialog").dialog('close');
   	}
    
    var draftStateUpdateCallback = function(response)
    {
        if ( response.rc != 200 )
        {
            ccpSession.showError(
                conversation.prefs.getMsg('save_draft_failed') + "<br>" +
                conversation.prefs.getMsg('twitter_reply_error_code') + " " + response.rc + "<br>" +
                conversation.prefs.getMsg('twitter_reply_error_message') + " " + response.text) ;
        
            return ;
        }
        
        ccpSession.closeTemplate() ;
    };            
   
    //send draft update request to server. Do not update state if already in draft. Only update draft
    ccpSession.updateDraft(draftStateUpdateCallback, conversation.draftToXML(draft_action, message, contactStatus, TWITTER_STATUS_REASON));
    
}


/**
 * Display the reply dialog with the social contact with the specified ID
 */
function showReplyDialog(contactId)
{
    var contact = conversation.urlToContactMap[contactId] ;
    var contactAuthor = trimAuthor(contact.author) ;
    
    var replyPrefix = "@" + contactAuthor ;
    $("#replyDialog").dialog({ title: "__MSG_twitter_reply_reply_title__ " + replyPrefix });
    
    var replyTextArea = document.getElementById("replyDialog_text") ;
    conversation.setDraft(REPLY_ACTION, replyPrefix); 
    document.getElementById("replyDialog_author").innerHTML = contactAuthor ;
    
    if ( ccp.utils.isEmptyString(contact.description) )
    {
        document.getElementById("replyDialog_description").innerHTML = contact.title ;
    }
    else
    {
        document.getElementById("replyDialog_description").innerHTML = contact.description ;
    }
    
	$("#replyDialog_insertChatInvitationButton").off("click").on("click",function(){ insertPlaceholder("#replyDialog_text"); updateCharactersLeft("replyDialog_text", "replyDialog_charactersLeft", "replyDialog_sendButton", "replyDialog_saveDraftButton");});
    $("#replyDialog_sendButton").off("click").on("click",function(){ sendReply(contact); });
    $("#replyDialog_saveDraftButton").off("click").on("click",function(){ saveDraft(REPLY_ACTION); });
    updateCharactersLeft("replyDialog_text", "replyDialog_charactersLeft", "replyDialog_sendButton", "replyDialog_saveDraftButton") ;
    
    // When element is visible, set cursor to end of pre-set text
    $("#replyDialog").dialog({open:function(event,ui){ 
    	var charsLeft = document.getElementById('replyDialog_charactersLeft').innerHTML;
    	var currentValue = $("#replyDialog_text").val();
    	if (currentValue.length > 1 && parseInt(charsLeft) > 0 && currentValue.charAt(currentValue.length-1) != ' ')
    	{
	    	$("#replyDialog_text").val(currentValue + " ");
	    	updateCharactersLeft("replyDialog_text", "replyDialog_charactersLeft", "replyDialog_sendButton", "replyDialog_saveDraftButton") ;
    	} 
    
		setCursorPosition(replyTextArea, $("#replyDialog_text").val().length);
    }});
    $("#replyDialog").dialog('open');


}

/**
 * Send a direct message using the selectedAccount.  The author of the social
 * contact is the target of the direct message.  The text in the reply area is
 * used as the text of the message.
 */
function directMessage(selectedAccount, contactAuthor, msgObj)
{
	var directMessageCallback = function(response)
	{
        hideProgressMessage() ;
        
	if(ccp.twitter.handleRateLimit(ccpSession,response,selectedAccount,null,true)) {
		return;
	}
	
        var error = ccp.utils.getErrorDetails(response) ; 
        if ( error != null )
        {
            ccpSession.showError("__MSG_twitter_reply_dm_failed__ " + selectedAccount + "<br>" + error) ;
            
            return ;
        }

		setInCookie(ACCOUNT_NAME_KEY, selectedAccount) ;
		var closeDialog = function() {
			// When developing a custom reply template, in lieu of ccp.const.TWITTER_REPLY below, send either  
			//  ccp.const.CUSTOM_REPLY or nothing (which will default to ccp.const.CUSTOM_REPLY).
			//  e.g.  	
			//			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED, ccp.const.CUSTOM_REPLY);
			//  or
			// 			ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED);
       		ccpSession.closeTemplate(ccp.const.SC_STATUS_HANDLED, ccp.const.TWITTER_REPLY) ;
        }
        makeShortURLActive(msgObj,closeDialog);
	}
	ccp.twitter.twitterDirectMessage(ccpSession, selectedAccount,  trimAuthor(contactAuthor),  msgObj.message , directMessageCallback) ;
}

/**
 * Send a direct message to the specified author
 */
function sendDirectMessage(contact)
{    
    ccpSession.clearError();
    
   // $("#dmDialog").dialog('close');

   // showProgressMessage("__MSG_twitter_reply_dm_progress__") ;
    
    var selectedAccount = accounts.options[accounts.selectedIndex].value ;
    
   // contactAuthor = trimAuthor(contactAuthor) ;

    updateInvitationInMessage("dm", selectedAccount, 
    						document.getElementById("dmDialog_text").value, contact);

   // directMessage(selectedAccount, contact.author, document.getElementById("dmDialog_text").value) ;
}

/**
 * Show the direct message dialog based on the social contact with the given ID
 */
function showDirectMessageDialog(contactId)
{
    var contact = conversation.urlToContactMap[contactId] ;

    $("#dmDialog").dialog({ title: "__MSG_twitter_reply_dm_title__ " + contact.author });
    
    conversation.setDraft(DM_ACTION, null); 
    
	$("#dmDialog_insertChatInvitationButton").off("click").on("click",function(){ insertPlaceholder("#dmDialog_text"); updateCharactersLeft("dmDialog_text", "dmDialog_charactersLeft", "dmDialog_sendButton", "dmDialog_saveDraftButton");});
    $("#dmDialog_sendButton").off("click").on("click",function(){ sendDirectMessage(contact); });
    $("#dmDialog_saveDraftButton").off("click").on("click",function(){ saveDraft(DM_ACTION); });
    updateCharactersLeft("dmDialog_text", "dmDialog_charactersLeft", "dmDialog_sendButton", "dmDialog_saveDraftButton") ;
    
    $("#dmDialog").dialog('open');
    
    setCursorPosition($("#dmDialog_text")[0], $("#dmDialog_text").val().length);
}

/**
 * Make sure the text in the reply area is within Twitter's limits.
 */
function updateCharactersLeft(textAreaId, charsLeftId, sendButtonId, saveDraftButtonId)
{
    var textLength = ccp.twitter.getMessageLength(document.getElementById(textAreaId).value) ;
    if ( (textLength <= 0) || (textLength > MAX_TWEET_LEN) )
    {
        $("#"+sendButtonId).attr({disabled:true});
        if(saveDraftButtonId != "undefined"){
			$("#"+saveDraftButtonId).attr({disabled:true});
        }
    }
    else
    {
        $("#"+sendButtonId).removeAttr("disabled");
        if(saveDraftButtonId != "undefined"){
			$("#"+saveDraftButtonId).removeAttr("disabled");
        }
    }
    var charsLeft = MAX_TWEET_LEN - textLength;
	document.getElementById(charsLeftId).innerHTML = charsLeft ;
}

/**
 * Get the currently selected account
 */
function getSelectedAccount()
{
    var account = null ;
    if ( accounts.selectedIndex > 0 )
    {
        account = accounts.options[accounts.selectedIndex].value ;
    }
    
    return account ;
}

/**
 * HTML UI callbacks
 */
 
/**
 * Process changes to the account pulldown
 */
function accountChanged()
{
    var account = getSelectedAccount() ;    
    if ( account != null )
    {
        setInCookie(ACCOUNT_NAME_KEY, account) ;
    }
    
	conversation.updateActions(account) ;
	profile.updateFollowing(account) ;
	agent.updateFollowing(account, follow, unfollow) ;
}

/**
 * Follow the author of the social contact
 */
function follow()
{
	if ( accounts.selectedIndex == 0 )
	{
		return ;
	}
	
	agent.follow(accounts.options[accounts.selectedIndex].value, author, follow, unfollow) ;
}

/**
 * Unfollow the author of the social contact
 */
function unfollow()
{
    if ( accounts.selectedIndex == 0 )
    {
        return ;
    }
    
    agent.unfollow(accounts.options[accounts.selectedIndex].value, author, follow, unfollow) ;
}

function followingMouseOver()
{
	var innerHtml = $("#followButton").html();
	if(innerHtml == "__MSG_twitter_reply_following__")
	{
		$("#followButton").html("__MSG_twitter_reply_unfollow__");
		$("#followButton").attr("class", "followButton redButton");
	}
	
}

function followingMouseOut()
{
	var innerHtml = $("#followButton").html();
	if(innerHtml == "__MSG_twitter_reply_unfollow__")
	{
		$("#followButton").html("__MSG_twitter_reply_following__");
		$("#followButton").attr("class", "followButton blueButton");
	}
}

/**
 * Store the details of the given social contact response
 */
function updateWithSocialContact(response)
{
    var contact = response.data ;
    author = ccp.utils.getElementValue(contact, "author") ;
    author = trimAuthor(author) ;
        
    if ( (author == null) || (author.length == 0) )
    {
        followButton.style.visibility = "hidden" ;
    }
   
    contactId = ccp.utils.getElementValue(contact, "id") ;
    contactStatus = ccp.utils.getElementValue(contact, "status") ;
    contactDraft =  ccp.utils.getElementValue(contact, "draftResponse") ; 
    contactAction =  ccp.utils.getElementValue(contact, "draftAction") ;   
    contactStatusUserId = ccp.utils.getElementValue(contact, "statusUserId") ; 
    timestamp = ccp.utils.getElementValue(contact, "statusTimestamp") ;
}

function feedUsesTwitterAccount(feedType)
{
    if ( (feedType == TWITTER_ACOUNT_TYPE) || (feedType == TWITTER_SEARCH_TYPE) || (feedType == TWITTER_STREAM_TYPE) )
    {
        return true;
    }
    
    return false;
}

/**
 * Update the UI (mainly the account selector) with the given list of accounts
 */
function updateWithAccounts(response)
{
    var feeds = response.data.getElementsByTagName("Feed");
    if ( feeds == null )
    {
        return;
    }

    var ccpAccounts = [] ;
    for ( var i = 0 ; i < feeds.length ; i++ )
    {
        var feedType = feeds[i].getElementsByTagName("type")[0].firstChild.nodeValue;
                    
        if ( feedUsesTwitterAccount(feedType) )
        {
            var username = feeds[i].getElementsByTagName("authenticationUsername")[0].firstChild.nodeValue;
            if ( $.inArray(username, ccpAccounts) < 0 )
            {
                ccpAccounts[ccpAccounts.length] = username;
            }
        }
    }
            
    var selectedAccount = getFromCookie(ACCOUNT_NAME_KEY) ;
    accounts[accounts.length] = new Option("", "") ;
            
    for ( var i = 0 ; i < ccpAccounts.length ; i++ )
    {
        accounts[accounts.length] = new Option(ccpAccounts[i], ccpAccounts[i]) ;
        if ( ccpAccounts[i] == selectedAccount )
        {
            accounts.selectedIndex = accounts.length - 1 ;
        }
    }
            
    accounts.disabled = false ;
}

/**
 * Show the given progress message
 */
function showProgressMessage(message)
{
    var messageSpan = document.getElementById("progressSpan") ;
    messageSpan.innerHTML = message ;
    
	var topOffset = $(window).height()/2;
	var leftOffset = $(window).width()/2 - $("#progressMessage").width()/2;    
	$("#progressMessage").offset({top: topOffset, left: leftOffset });

    var progressDiv = document.getElementById("progress") ;
    progressDiv.style.visibility = "visible" ;
}

/**
 * Hide the progress message
 */
function hideProgressMessage()
{
    var progressDiv = document.getElementById("progress") ;
    progressDiv.style.visibility = "hidden" ;	  
}

/**
 * onLoad() entry point into the reply template
 */
window._ccpMain=function()
{
    $("#accounts").on("change",accountChanged);
    $("#followButton").on("click",follow);
    $("#followButton").on("mouseover",followingMouseOver);
    $("#followButton").on("mouseout",followingMouseOut);
    
    $("#replyDialog_text").on("change keyup keypress",function(){
	updateCharactersLeft('replyDialog_text', 'replyDialog_charactersLeft', 'replyDialog_sendButton', 'replyDialog_saveDraftButton');
    });
  	
    $("#replyDialog_text").bind('input', function(e)           
    {              
		updateCharactersLeft('replyDialog_text', 'replyDialog_charactersLeft', 'replyDialog_sendButton', 'replyDialog_saveDraftButton');    	                
    });
        
    $("#dmDialog_text").on("change keyup keypress",function(){
	updateCharactersLeft('dmDialog_text', 'dmDialog_charactersLeft', 'dmDialog_sendButton', 'dmDialog_saveDraftButton');
    });
    
	
	$("#dmDialog_text").bind('input', function(e)           
    {              
		updateCharactersLeft('dmDialog_text', 'dmDialog_charactersLeft', 'dmDialog_sendButton', 'dmDialog_saveDraftButton');    	                
    });


    $("#retweetDialog").dialog( { autoOpen: false, modal: true } );
    $("#retweetDialog").dialog( { height: 140, width: 605 } );

    $("#dmDialog").dialog( { autoOpen: false, modal: true } );
    $("#dmDialog").dialog( { height: 205, width: 625 ,close : function(){ $("#dmDialog_error_messages").empty(); }} );

    $("#replyDialog").dialog( { autoOpen: false, modal: true } );
    $("#replyDialog").dialog( { height: 265, width: 620 , close : function(){ $("#replyDialog_error_messages").empty(); } });

    $("#errorDialog").dialog( { autoOpen: false, modal: true } );
    $("#errorDialog").dialog( { height: 120, width: 390 } );
    
    followButton   = document.getElementById("followButton") ;
    accounts       = document.getElementById("accounts") ;

    ccpSession = new ccp.twitter.TwitterSession(window.location.href) ;
    conversation = new ccp.twitter.Conversation(ccpSession, "conversation", "profileTitleSpan") ;
    profile = new ccp.twitter.Profile(ccpSession,
                    "profileName", "profileHandle", "profileImage", "profileDescription",
                    "profileUrl", "profileFollowersCount", "profileFollowingAgent") ;
    agent = new ccp.twitter.Agent(ccpSession, "followButton", "followAuthor", "accounts") ;
    
    ccpSession.setHeading("__MSG_twitter_reply_heading__") ;

    var urls = [] ;
    urls[0] = ccpSession.restSocialContact ;
    urls[1] = ccpSession.restGetFeedList ;
    
    var contactCallback = function(response)
    {
        if ( response.rc != 200 )
        {
            ccpSession.showError(
                "__MSG_twitter_reply_get_contact_failed__<br>" +
                "__MSG_twitter_reply_error_code__ " + response.rc + "<br>" +
                "__MSG_twitter_reply_error_message__ " + response.text) ;
        
            return ;
        }
        
        updateWithSocialContact(response) ;

        var feedsCallback = function(response)
        {
            if ( response.rc != 200 )
            {
                ccpSession.showError(
                    "__MSG_twitter_reply_get_accounts_failed__<br>" +
                    "__MSG_twitter_reply_error_code__ " + response.rc + "<br>" +
                    "__MSG_twitter_reply_error_message__ " + response.text) ;
                
                return ;
            }
            
            updateWithAccounts(response) ;
            
            var account = getSelectedAccount() ;
            var oauthAccount = account ;
            if ( (oauthAccount == null) && (accounts.length > 1) )
            {
                oauthAccount = accounts[1].value ; 
            }
           
            conversation.populate(contactId, account, timestamp, contactStatus, contactStatusUserId, contactDraft, contactAction, showReplyDialog, showRetweetDialog, showDirectMessageDialog) ;
            profile.populate(author, account, oauthAccount) ;
            agent.setAuthor(author) ;
            agent.updateFollowing(account,follow,unfollow) ;
        }        
        ccpSession.getAllCcpFeeds(feedsCallback) ;
    }
    ccpSession.getSocialContact(contactCallback) ;

    var campaignCallBack = function (campaign) {
 		$('.invitationButton').hide();
  		// Check if user is replying from campaign or search
      	if(campaign==null)	{
      		ccp.log("campaign is null");
      		return;
      	}
      	// Check if campaign has a invitation feed
      	var invitationFeedElement = campaign.data.getElementsByTagName("chatInvitationFeed");
      	if(invitationFeedElement ==null  ||    typeof invitationFeedElement[0] === "undefined"  || invitationFeedElement[0].firstChild ==null) {
      	 	ccp.log("campaign invitation is null");
      		return;
      	}
      	var invitationFeedURI = invitationFeedElement[0].firstChild.nodeValue;
      	if($.trim(invitationFeedURI).length ==0){
      	    ccp.log("campaign invitation is blank");
      		return;
      	}
      	ccp.log("Chat invitation feed URI: " +invitationFeedURI );
      	$('.invitationButton').show(); //show the invite buttons
      	ccpSession.chatInvitationFeed =  invitationFeedURI;
     };
    ccpSession.getCampaign(campaignCallBack);
  
}

})();

</script>

</head>

<body onLoad="_ccpMain()">
<div class="twitterReply">

<!-- PROFILE -->
    <div class="profile">
        <div class="profileTitleRow">
             <span><img class="twitterIcon" src="https://172.31.5.56/templates/reply/../../img/twitter.png" ></img></span>
             <span id="profileTitleSpan"></span>
        </div>
        <div class="profilePicture">
            <img id="profileImage"/>
        </div>
        <div class="profileDetail">
            <div><label class="profileName" id="profileName"></label></div>
            <div class="profileHandle" id="profileHandle"></div>
            <div class="profileText" id="profileDescription"></div>
            <div class="profileUrl"> <a id="profileUrl" target="_blank" href="#"></a></div>
            <div id="profileFollowersCount"></div>
            <div class="profileText" style="display:none;"> <span id="profileFollowingAgent"></span> </div>
        </div>
    </div>
    
    <hr class="separatorLine" style="border-color: #D7D7D7;"/>

<!-- Follow and account collection -->
    <div class="twitterReplyAccount">
        <div class="accountRow">
            <span>
                <label>__MSG_twitter_reply_account__&nbsp;</label>
                <select id="accounts" tabindex="1">
                </select>
            </span>
            <span style="margin-left: 10px;">
                <img src="https://172.31.5.56/templates/reply/../../img/infoMessage.png" class="infoIcon"/>
                <label class="infoText">__MSG_twitter_reply_info_select_an_account__</label>
            </span>
            <span style="height: 100%; margin: 0px 0px 0px 10px; padding: 0px 0px 0px 10px; border-left: 2px double #D7D7D7">
                <button disabled="true" id="followButton" class="followButton whiteButton">
                	<i class="followButtonIcon"></i><strong>Follow</strong></button> 
                <span id="followAuthor"></span>
            </span>
        </div>
    </div>
    
<!-- Conversation -->
    <div class="twitterReplyConversation">
        <div class="conversationPane" id="conversationPane">
            <div class="conversationTitle">__MSG_twitter_reply_conversation_title__</div> 
            <hr class="separatorLine"/>
            <div class="conversation" id="conversation">
                <!-- The following div for conversationItem is for illustration purpose on how the 
                	 conversationItems will be generated by ccp-twitter.js --
                <div class="conversationItem"> 
                    <div class="twitterAuthor"> 
                        <span>MyRobot</span>
                        <span id="" class="profileHandle">@smanuser4</span>
                        <span class="actionGroup"> 
                            <img src="http://ccbu.cisco.com/download/attachments/59704593/back_1082_16.png"/>
                            <a class="replyAction" id="">__MSG_twitter_reply_reply_action__</a>
                            <img src="http://ccbu.cisco.com/download/attachments/59704593/regenerate_1063_16.png"/>
                            <a class="replyAction" id="">__MSG_twitter_reply_retweet_action__</a>
                            <img src="http://ccbu.cisco.com/download/attachments/59704593/email_0104_16.png"/>
                            <a class="replyAction" id="">__MSG_twitter_reply_dm_action__</a>
                        </span>
                    </div>
                    <div id="contactDescription_...">
                    	<a id="contactLink_..." href="http://twitter.com/smanuser4/statuses/365558766734802945" target="_blank" class="conversationItemLink"> 
                    		@smanuser2 http://t.co/4Al4gRoHCt sdfsd sdfsdfdsfsdf 43t345 3eter eree rert tertertert ertert34t 653 erger gregerg 335453453dfvdf 4t343t4
                    	</a>
                    </div>
                    <div class="conversationItemTime">4/10/13, 10:30 AM</div>
                </div>
                <hr class="separatorLine"/>
                <div class="conversationItem"> 
           			...
                </div> -->
            </div>
        </div>
    </div>
    
<!-- Reply Dialog -->
  <div id="replyDialog" title="">
  	<div id="replyDialog_error_messages"></div>
    <div>
      <textarea id="replyDialog_text" class="tweetArea">
      </textarea>
    </div>
    <div class="dialogButtons">
      <label id="replyDialog_charactersLeft" class="countDown">140</label>
      <input id="replyDialog_sendButton" class="tweetButton" type="button" value="__MSG_twitter_reply_tweet__">
      <input id="replyDialog_saveDraftButton" class="tweetButton" type="button" value="__MSG_twitter_save_draft__">
      <input id="replyDialog_insertChatInvitationButton" class="tweetButton invitationButton hidden" type="button" value="__MSG_twitter_insert_chat_invitation__">
    </div>
    <div class="repliedToTweet">
      <div id="replyDialog_author" class="authorSmall"></div>
      <div id="replyDialog_description" class="descriptionSmall"></div>
    </div>
  </div>
  
  <!-- Retweet dialog -->
  <div id="retweetDialog" title="__MSG_twitter_reply_retweet_title__">
    <div id="retweetDialog_author" class="authorSmall"></div>
    <div id="retweetDialog_description" class="descriptionSmall"></div>
    <div class="dialogButtons">
      <input id="retweetDialog_sendButton" class="tweetButton retweetButton" type="button" value="__MSG_twitter_reply_retweet__">
    </div>
  </div>
    
  <!-- Direct message dialog -->
  <div id="dmDialog" title="">
  	<div id="dmDialog_error_messages"></div>
    <div>
      <textarea id="dmDialog_text" class="tweetArea">
      </textarea>
    </div>
    <div class="dialogButtons">
      <label id="dmDialog_charactersLeft" class="countDown">140</label>
      <input id="dmDialog_sendButton" class="tweetButton" type="button" value="__MSG_twitter_reply_send__">
      <input id="dmDialog_saveDraftButton" class="tweetButton" type="button" value="__MSG_twitter_save_draft__">
      <input id="dmDialog_insertChatInvitationButton" class="tweetButton invitationButton hidden" type="button" value="__MSG_twitter_insert_chat_invitation__">
    </div>
  </div>

  <!-- Error dialog -->
  <div id="errorDialog" title="">
    <div id="errorDialog_text" class="errorText"></div>
  </div>
  
  <div id="progress" class="progressLayer">
    <div id="progressMessage" class="progressMessage"><img src='https://172.31.5.56/templates/reply/../../img/loading.gif' />
      <span id="progressSpan" class="progressSpan">Loading</span>
    </div>
  </div>
</div>

</body>
</html>
